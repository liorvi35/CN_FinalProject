import socket
import time

# Constants
SERVER_IP = '127.0.0.1'
SERVER_PORT = 1234
DATA_PORT = 1235
BUFFER_SIZE = 1024
WINDOW_SIZE = 4
INITIAL_CWND = 1
THRESHOLD = 8
TIMEOUT = 3
server_address = (SERVER_IP, SERVER_PORT)

# Create UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
data_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind socket to server address and port
data_sock.bind((SERVER_IP, SERVER_PORT+1))

# Listen for incoming connections
data_sock.listen()

# Initialize variables for sequence numbers, window size, and packets buffer
seq_num = 1
window_size = INITIAL_CWND
packets_buffer = {}


def send_packet(packet):
    global seq_num
    global window_size
    global server_address
    global client_socket
    client_socket.sendto(packet, server_address)
    print(f"Sent packet {seq_num}")
    # Add packet to buffer
    packets_buffer[seq_num] = packet

    # Update sequence number and window size
    seq_num += 1
    if seq_num <= window_size:
        window_size = min(window_size * 2, WINDOW_SIZE)
    else:
        window_size += 1 / WINDOW_SIZE

    # Set timeout based on estimated RTT
    start_time = time.time()
    client_socket.settimeout(TIMEOUT)
    while True:
        # Receive ACK
        try:
            ack_packet, _ = client_socket.recvfrom(BUFFER_SIZE)
            end_time = time.time()
            rtt = end_time - start_time
            client_socket.settimeout(max(TIMEOUT - rtt, 0))
        except socket.timeout:
            # Timeout, retransmit unacknowledged packets
            print('Timeout, retransmitting packets')
            window_size = max(window_size / 2, 1)
            for seq, pkt in packets_buffer.items():
                client_socket.sendto(pkt, server_address)
                print(f'Retransmitted packet {seq}')
            break

        # Parse ACK
        ack_data = ack_packet.decode()
        print(f'ack_data: {ack_data}')
        ack_seq_num = int(ack_data.split(':')[0])
        print(f'Received ACK {ack_seq_num}')

        # Update packets buffer and window size
        if ack_seq_num in packets_buffer:
            del packets_buffer[ack_seq_num]
            if ack_seq_num <= window_size:
                window_size = min(window_size + 1, WINDOW_SIZE)
        else:
            # Duplicate ACK, ignore
            continue

        # Handle out-of-order ACKs
        while len(packets_buffer) > 0:
            if min(packets_buffer.keys()) == ack_seq_num + 1:
                break
            seq = min(packets_buffer.keys())
            pkt = packets_buffer[seq]
            client_socket.sendto(pkt, server_address)
            print(f'Retransmitted packet {seq}')
            del packets_buffer[seq]

        # Check if all packets have been acknowledged
        if len(packets_buffer) == 0:
            # """
            # Accept connection from client
            client_data_socket, client_data_address = data_sock.accept()

            # Receive data from client
            data = client_data_socket.recv(BUFFER_SIZE).decode()
            print(f'Received: {data}')
            # """
            print("#######end#######")
            break


def send_data(data):
    global seq_num
    # Divide the message into chunks
    packet = f"{seq_num}:{data}".encode()
    print(packet)
    send_packet(packet)


"""
def main():
    send_data("7 $ some data")
    time.sleep(0.01)
    send_data("9 $ None")
    client_socket.close()

    # Close sockets
    client_socket.close()
    data_sock.close()


if __name__ == "__main__":
    main()
"""
